paths:
  /users/{page}/{limit}:
    get:
      tags:
        - users
      summary: Get all users.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '403':
          description: Access denied. Insufficient permission.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: path
          schema:
            type: integer
        - name: limit
          in: path
          schema:
            type: integer
  /users/bank-account/{userId}:
    get:
      tags:
        - users
      parameters:
        - name: userId
          in: path
          schema:
            type: string
      summary: Get Bank Account.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BankAccount'
        '403':
          description: Access denied. Insufficient permission.
      security:
        - bearerAuth: []

  /users:
    post:
      tags:
        - users
      summary: Create user.
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Email already exists
      security:
        - bearerAuth: []

  /users/{id}:
    delete:
      tags:
        - users
      summary: Delete user.
      parameters:
        - name: id
          in: path
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully
        '400':
          description: Missing id parameter
        '403':
          description: Can not delete Admin User
        '404':
          description: User not found
      security:
        - bearerAuth: []
    get:
      tags:
        - users
      summary: Get one user.
      parameters:
        - name: id
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Missing id parameter
        '404':
          description: User not found
      security:
        - bearerAuth: []
    patch:
      tags:
        - users
      summary: Update one user
      parameters:
        - name: id
          in: path
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Missing id parameter
        '404':
          description: User not found
      security:
        - bearerAuth: []

  /users/confirm-registration/{token}:
    get:
      parameters:
        - name: token
          in: path
          schema:
            type: string
      tags:
        - users
      summary: Confirm registration.
      responses:
        '204':
          description: Success
        '404':
          description:

  /users/confirm-registration/reset-token/{email}:
    get:
      parameters:
        - name: email
          in: path
          schema:
            type: string
      tags:
        - users
      summary: Reset token registration.
      responses:
        '201':
          description: Success
        '404':
          description:

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
        createdDate:
          type: string
          format: date-time
  requestBodies:
    User:
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            type: object
            properties:
              name:
                type: string
                default: John
              lastName:
                type: string
                default: Doe
              email:
                type: string
                default: test@test.com
              password:
                type: string
                format: password
                default: 12345678
